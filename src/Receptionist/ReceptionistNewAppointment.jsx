import React, { useState, useEffect } from "react";
import SidebarWithHeader from "./common/components/ReceptionistSidebarWithHeader.jsx";
import { useAuth } from "../contexts/AuthContext.jsx";
import { useNavigate } from "react-router-dom";
import { 
  Calendar, 
  Clock, 
  User, 
  Phone, 
  Mail,
  Scissors,
  Save,
  ArrowLeft,
  ArrowRight,
  Search,
  CheckCircle,
  AlertTriangle,
  Filter,
  ChevronLeft,
  ChevronRight,
  Check,
  X,
  Info,
  Cake,
  User2,
  Tag,
  Star,
  Shield,
  UserCheck
} from "lucide-react";
import { 
  appointmentService, 
  serviceService, 
  stylistService, 
  clientService,
  appointmentUtils,
  branchService,
  scheduleService,
  staffServicesService 
} from "../services/appointmentService.js";
import { sendWelcomePasswordEmail } from "../brevo";

export default function ReceptionistNewAppointment() {
  const { userProfile, branchInfo } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    clientFirstName: "",
    clientLastName: "",
    clientPhone: "",
    clientEmail: "",
    clientBirthday: "",
    clientGender: "",
    clientId: "", // For existing clients
    isNewClient: true,
    registerAsUser: false, // Option to register as user or just store data
    autoGeneratedPassword: "", // Auto-generated password for new users
    services: [], // Array of selected services
    stylists: {}, // Object mapping service IDs to stylist IDs
    date: "",
    time: "",
    timeWindow: "", // Preferred time window
    totalCost: 0,
    notes: "",
    status: "pending"
  });

  const [errors, setErrors] = useState({});
  const [clients, setClients] = useState([]);
  const [services, setServices] = useState([]);
  const [availableServices, setAvailableServices] = useState([]);
  const [stylists, setStylists] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [staffServices, setStaffServices] = useState([]);
  const [servicesPerPage] = useState(6); // Show 6 services per page
  const [currentServicePage, setCurrentServicePage] = useState(1);
  const [serviceSearchTerm, setServiceSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [availableSlots, setAvailableSlots] = useState([]);
  const [showClientSearch, setShowClientSearch] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [availableStylists, setAvailableStylists] = useState([]);
  const [clientMode, setClientMode] = useState("search"); // "search", "new", "selected"
  const [emailValidation, setEmailValidation] = useState({ isValid: null, message: "" });
  const [phoneValidation, setPhoneValidation] = useState({ isValid: null, message: "" });
  const [validationErrors, setValidationErrors] = useState({});
  const [isValidating, setIsValidating] = useState(false);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [isSendingPassword, setIsSendingPassword] = useState(false);

  const userInfo = {
    name: userProfile?.firstName || "Receptionist",
    subtitle: userProfile?.email || "Receptionist Email",
    badge: "Receptionist",
    profileImage: userProfile?.profileImage || "./placeholder.svg"
  };

  // Generate formatted password based on client info
  const generatePassword = () => {
    const { clientFirstName, clientLastName, clientBirthday } = formData;
    
    // Get first 2 characters of first name (uppercase)
    const firstNamePart = clientFirstName ? clientFirstName.substring(0, 2).toUpperCase() : "CL";
    
    // Get first 2 characters of last name (lowercase)
    const lastNamePart = clientLastName ? clientLastName.substring(0, 2).toLowerCase() : "nt";
    
    // Get last 2 digits of birth year
    const birthYear = clientBirthday ? clientBirthday.substring(2, 4) : "24";
    
    // Generate 2 random special characters
    const specialChars = "!@#$%^&*";
    const randomSpecial = specialChars.charAt(Math.floor(Math.random() * specialChars.length)) + 
                         specialChars.charAt(Math.floor(Math.random() * specialChars.length));
    
    // Format: FirstName(2) + LastName(2) + BirthYear(2) + SpecialChars(2)
    // Example: JOSmith24!@
    const formattedPassword = firstNamePart + lastNamePart + birthYear + randomSpecial;
    
    return formattedPassword;
  };

  // Email validation function
  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email) {
      return { isValid: null, message: "" };
    }
    if (!emailRegex.test(email)) {
      return { isValid: false, message: "Please enter a valid email address" };
    }
    return { isValid: true, message: "Email format is valid" };
  };

  // Check if email already exists
  const checkEmailExists = async (email) => {
    if (!email) return false;
    try {
      return await clientService.checkEmailExists(email);
    } catch (error) {
      console.error('Error checking email:', error);
      return false;
    }
  };

  // Check if phone already exists
  const checkPhoneExists = async (phone) => {
    if (!phone) return false;
    try {
      return await clientService.checkPhoneExists(phone);
    } catch (error) {
      console.error('Error checking phone:', error);
      return false;
    }
  };

  // Real-time email validation
  const handleEmailChange = async (email) => {
    setFormData(prev => ({ ...prev, clientEmail: email }));
    
    // Basic format validation
    const formatValidation = validateEmail(email);
    setEmailValidation(formatValidation);
    
    // If format is valid, check if email exists
    if (formatValidation.isValid && email) {
      setIsValidating(true);
      try {
        const emailExists = await checkEmailExists(email);
        if (emailExists) {
          setEmailValidation({ 
            isValid: false, 
            message: "Email address is already registered with another client" 
          });
        } else {
          setEmailValidation({ 
            isValid: true, 
            message: "Email address is available" 
          });
        }
      } catch (error) {
        setEmailValidation({ 
          isValid: false, 
          message: "Error checking email availability" 
        });
      } finally {
        setIsValidating(false);
      }
    }
  };

  // Real-time phone validation
  const handlePhoneChange = async (phone) => {
    setFormData(prev => ({ ...prev, clientPhone: phone }));
    
    // Basic phone validation
    if (!phone) {
      setPhoneValidation({ isValid: null, message: "" });
      return;
    }
    
    if (phone.length < 10) {
      setPhoneValidation({ 
        isValid: false, 
        message: "Phone number must be at least 10 digits" 
      });
      return;
    }
    
    // Check if phone exists
    setIsValidating(true);
    try {
      const phoneExists = await checkPhoneExists(phone);
      if (phoneExists) {
        setPhoneValidation({ 
          isValid: false, 
          message: "Phone number is already registered with another client" 
        });
      } else {
        setPhoneValidation({ 
          isValid: true, 
          message: "Phone number is available" 
        });
      }
    } catch (error) {
      setPhoneValidation({ 
        isValid: false, 
        message: "Error checking phone availability" 
      });
    } finally {
      setIsValidating(false);
    }
  };

  // Load data from Firestore
  useEffect(() => {
    const loadData = async () => {
      try {
        // Load services for current branch only
        if (branchInfo?.id) {
          let servicesData = await branchService.getServicesByBranch(branchInfo.id);
          if (!servicesData || servicesData.length === 0) {
            // Fallback to global services if branch-specific services are not set up
            servicesData = await serviceService.getServices();
          }
        setServices(servicesData || []);
        }
        
        // Load stylists for current branch
        if (branchInfo?.id) {
          const stylistsData = await stylistService.getStylistsByBranch(branchInfo.id);
          // Transform stylist data to match expected format
          const transformedStylists = stylistsData.map(stylist => ({
            id: stylist.id,
            name: `${stylist.firstName} ${stylist.lastName}`,
            specialties: stylist.staffData?.skills || [],
            serviceIds: stylist.staffData?.skills || [],
            phone: stylist.phoneNumber,
            email: stylist.email,
            available: true,
            rating: 4.5
          }));
          setStylists(transformedStylists);
        }
        
        // Load clients
        const clientsData = await clientService.getClients();
        console.log('Loaded clients for appointment form:', clientsData);
        setClients(clientsData || []);
        
        // Load schedules for availability checking
        if (branchInfo?.id) {
          const today = new Date();
          const startDate = new Date(today);
          startDate.setDate(today.getDate() - 7); // Load 7 days back
          const endDate = new Date(today);
          endDate.setDate(today.getDate() + 30); // Load 30 days forward

          const schedulesData = await scheduleService.getBranchSchedules(
            branchInfo.id,
            startDate.toISOString().split('T')[0],
            endDate.toISOString().split('T')[0]
          );
          setSchedules(schedulesData || []);
        }
        
        // Load staff services relationships
        if (branchInfo?.id) {
          const staffServicesData = await staffServicesService.getStaffServicesByBranch(branchInfo.id);
          setStaffServices(staffServicesData || []);
        }
    
        // Generate initial time slots
        generateAvailableSlots();
      } catch (error) {
        console.error('Error loading data:', error);
        // Set empty arrays as fallback
        setServices([]);
        setStylists([]);
        setClients([]);
      }
    };

    loadData();
  }, [branchInfo?.id]);

  useEffect(() => {
    // Calculate total cost when services change
    const total = (formData.services || []).reduce((sum, serviceId) => {
      const service = (services || []).find(s => s && s.id === serviceId);
      return sum + (service?.price || 0);
    }, 0);
    setFormData(prev => ({ ...prev, totalCost: total }));
  }, [formData.services, services]);

  useEffect(() => {
    if (formData.date) {
      generateAvailableSlots();
    }
  }, [formData.date, branchInfo?.operatingHours]);

  const generateAvailableSlots = async () => {
    try {
      const dateToUse = formData.date || new Date().toISOString().split('T')[0];
      
      // Generate time slots based on branch operating hours
      const slots = appointmentUtils.generateTimeSlots(dateToUse, branchInfo?.operatingHours);
      
      // Check availability against existing appointments
      if (branchInfo?.id && formData.date) {
        const existingAppointments = await appointmentService.getAppointmentsByBranch(branchInfo.id, {
          date: formData.date
        });
        
        const updatedSlots = slots.map(slot => ({
          ...slot,
          available: appointmentUtils.isTimeSlotAvailable(existingAppointments, formData.date, slot.time)
        }));
        
        setAvailableSlots(updatedSlots);
      } else {
        setAvailableSlots(slots);
      }
    } catch (error) {
      console.error('Error generating time slots:', error);
      // Fallback to basic slots with operating hours
      const dateToUse = formData.date || new Date().toISOString().split('T')[0];
      const slots = appointmentUtils.generateTimeSlots(dateToUse, branchInfo?.operatingHours);
      setAvailableSlots(slots);
    }
  };

  const nextStep = () => {
    if (validateCurrentStep()) {
      setCurrentStep((prev) => prev + 1);
    }
  };

  const prevStep = () => {
    setCurrentStep((prev) => prev - 1);
  };

  const validateCurrentStep = () => {
    const newErrors = {};
    
      switch (currentStep) {
        case 1: // Client Information - Basic fields + conditional email
            if (!formData.clientFirstName.trim()) newErrors.clientFirstName = "First name is required";
            if (!formData.clientLastName.trim()) newErrors.clientLastName = "Last name is required";
            if (!formData.clientPhone.trim()) newErrors.clientPhone = "Phone number is required";
          
          // Validate phone number
          if (formData.clientPhone && phoneValidation.isValid === false) {
            newErrors.clientPhone = phoneValidation.message;
          }
          
          // Only require email if registering as user
          if (formData.registerAsUser && !formData.clientEmail.trim()) {
            newErrors.clientEmail = "Email is required when registering as user";
          }
          
          // Validate email format if provided
          if (formData.clientEmail && emailValidation.isValid === false) {
            newErrors.clientEmail = emailValidation.message;
          }
          break;
      case 2: // Date & Time
        if (!formData.date) newErrors.date = "Please select a date";
        if (!formData.time) newErrors.time = "Please select a time";
        break;
      case 3: // Service Selection & Stylist Assignment
        if (formData.services.length === 0) newErrors.services = "Please select at least one service";
        // Check if all services have assigned stylists
        for (const serviceId of formData.services) {
          if (!formData.stylists[serviceId]) {
            newErrors.stylists = "Please assign a stylist for all services";
            break;
          }
        }
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Calendar helper functions
  const isSameDay = (date1, date2) => {
    if (!date1 || !date2) return false;
    
    // Convert both dates to Date objects if they're strings
    const d1 = date1 instanceof Date ? date1 : new Date(date1);
    const d2 = date2 instanceof Date ? date2 : new Date(date2);
    
    // Check if dates are valid
    if (isNaN(d1.getTime()) || isNaN(d2.getTime())) return false;
    
    // Normalize both dates to local timezone for comparison
    const normalized1 = new Date(d1.getFullYear(), d1.getMonth(), d1.getDate());
    const normalized2 = new Date(d2.getFullYear(), d2.getMonth(), d2.getDate());
    
    const isSame = normalized1.getTime() === normalized2.getTime();
    
    console.log('Comparing dates:', d1, d2, 'Normalized:', normalized1, normalized2, 'Same:', isSame);
    return isSame;
  };

  const getCalendarDays = () => {
    if (!currentMonth) return [];
    
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    
    // Get first day of the month and calculate starting date
    const firstDay = new Date(year, month, 1);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const days = [];
    for (let i = 0; i < 42; i++) { // 6 weeks * 7 days
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      days.push(date);
    }
    
    return days;
  };

  const handleDateSelect = (date) => {
    if (!date) return;
    
    // Use local date methods to avoid timezone issues
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const dateString = `${year}-${month}-${day}`;
    
    console.log('Selected date:', date, 'Date string:', dateString);
    
    setFormData(prev => ({
      ...prev,
      date: dateString,
      time: '' // Reset time when date changes
    }));
    
    // Clear time-related errors
    setErrors(prev => ({
      ...prev,
      time: ''
    }));
  };

  const handleTimeSelect = (time) => {
    setFormData(prev => ({
      ...prev,
      time: time
    }));
    
    // Clear time error
    setErrors(prev => ({
      ...prev,
      time: ''
    }));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ""
      }));
    }

    // Handle email validation
    if (name === 'clientEmail') {
      const validation = validateEmail(value);
      setEmailValidation(validation);
    }

    // Generate password when registerAsUser is checked
    if (name === 'registerAsUser' && e.target.checked) {
      const password = generatePassword();
      setFormData(prev => ({
        ...prev,
        autoGeneratedPassword: password
      }));
    }

    // Regenerate password when client info changes (if registerAsUser is checked)
    if (formData.registerAsUser && (name === 'clientFirstName' || name === 'clientLastName' || name === 'clientBirthday')) {
      // Use setTimeout to ensure the formData is updated first
      setTimeout(() => {
        const password = generatePassword();
        setFormData(prev => ({
          ...prev,
          autoGeneratedPassword: password
        }));
      }, 0);
    }
  };

  const handleClientSelect = (client) => {
    setFormData(prev => ({
      ...prev,
      clientFirstName: client.firstName || '',
      clientLastName: client.lastName || '',
      clientPhone: client.phoneNumber,
      clientEmail: client.email,
      clientBirthday: client.birthday || "",
      clientGender: client.gender || "",
      clientId: client.id,
      isNewClient: false,
      registerAsUser: false, // Always set to false for existing clients
      autoGeneratedPassword: ""
    }));
    setClientMode("selected");
    setShowClientSearch(false);
    setEmailValidation({ isValid: null, message: "" });
  };

  const handleServiceToggle = (serviceId) => {
    setFormData(prev => ({
      ...prev,
      services: prev.services.includes(serviceId)
        ? prev.services.filter(id => id !== serviceId)
        : [...prev.services, serviceId]
    }));
  };

  const handleStylistAssign = (serviceId, stylistId) => {
    setFormData(prev => ({
      ...prev,
      stylists: {
        ...prev.stylists,
        [serviceId]: stylistId
      }
    }));
  };

  // Check if a stylist is available at a specific date and time
  const isStylistAvailable = (stylistId, date, time) => {
    if (!date || !time || !stylistId) return true; // Default to available if no date/time selected
    
    const dateStr = date.split('T')[0]; // Ensure we only use the date part
    const stylistSchedules = schedules.filter(schedule => 
      schedule.stylistId === stylistId && schedule.date === dateStr
    );
    
    // If no schedule found, stylist is available by default
    if (stylistSchedules.length === 0) return true;
    
    // Check if the time conflicts with any scheduled exceptions
    for (const schedule of stylistSchedules) {
      if (schedule.status === 'available') {
        continue; // Available schedules don't block availability
      }
      
      // For busy, break, or off schedules, check time conflict
      const appointmentTime = time;
      const scheduleStart = schedule.startTime;
      const scheduleEnd = schedule.endTime;
      
      // Simple time comparison (assuming HH:MM format)
      if (appointmentTime >= scheduleStart && appointmentTime < scheduleEnd) {
        return false; // Stylist is not available during this time
      }
    }
    
    return true; // Available if no conflicts found
  };

  const getAvailableStylistsForService = (serviceId) => {
    return (stylists || []).filter(stylist => {
      // First check if stylist can perform the service using staff_services collection
      const canPerformService = staffServices.some(staffService => 
        staffService.staffId === stylist.id && staffService.serviceId === serviceId
      );
      
      if (!canPerformService) return false;
      
      // Then check if stylist is available at the selected date/time
      const isAvailable = isStylistAvailable(stylist.id, formData.date, formData.time);
      
      return isAvailable;
    });
  };

  // Get all stylists for a service (including unavailable ones) with availability status
  const getAllStylistsForService = (serviceId) => {
    return (stylists || []).filter(stylist => {
      // Check if stylist can perform the service using staff_services collection
      const canPerformService = staffServices.some(staffService => 
        staffService.staffId === stylist.id && staffService.serviceId === serviceId
      );
      
      return canPerformService;
    }).map(stylist => ({
      ...stylist,
      isAvailableAtSelectedTime: isStylistAvailable(stylist.id, formData.date, formData.time)
    }));
  };

  const getSelectedServices = () => {
    const allowedServiceIds = new Set((staffServices || []).map(ss => ss.serviceId));
    return (formData.services || [])
      .filter(serviceId => allowedServiceIds.has(serviceId))
      .map(serviceId => (services || []).find(service => service && service.id === serviceId))
      .filter(Boolean);
  };

  const hasChemicalServices = () => {
    return getSelectedServices().some(service => service.isChemical);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateCurrentStep()) return;
    
    setLoading(true);
    
    try {
      // Prepare appointment data (store only minimal client fields in appointment)
      const selectedServices = getSelectedServices();
      const appointmentData = {
        clientFirstName: formData.clientFirstName,
        clientLastName: formData.clientLastName,
        clientPhone: formData.clientPhone,
        clientId: formData.clientId || null,
        services: selectedServices.map(service => ({
          id: service.id,
          name: service.name,
          duration: service.duration,
          price: service.price,
          category: service.category
        })),
        stylists: Object.entries(formData.stylists).map(([serviceId, stylistId]) => {
          const stylist = stylists.find(s => s.id === stylistId);
          const service = services.find(s => s.id === serviceId);
          return {
            serviceId,
            serviceName: service?.name,
            stylistId,
            stylistName: stylist?.name
          };
        }),
        date: formData.date,
        time: formData.time,
        totalCost: formData.totalCost,
        notes: formData.notes,
        status: formData.status,
        branchId: branchInfo?.id || null,
        createdBy: userProfile?.uid || null
      };

      // Do not create auth user here. Registration happens separately via client signup flow.

      // If registering as user, send welcome email with autogenerated password
      if (formData.registerAsUser && formData.clientEmail && formData.autoGeneratedPassword) {
        try {
          await sendWelcomePasswordEmail(
            formData.clientEmail,
            formData.autoGeneratedPassword,
            formData.clientFirstName
          );
        } catch (emailErr) {
          console.error('Error sending welcome email:', emailErr);
          // Non-blocking: continue creating appointment
        }
      }

      // Create appointment
      await appointmentService.createAppointment(appointmentData);
      
      // Redirect back to appointments list
      navigate("/receptionist-appointments");
    } catch (error) {
      console.error("Error creating appointment:", error);
      
      // Handle validation errors from client creation
      if (error.message && error.message.includes('{')) {
        try {
          const validationErrors = JSON.parse(error.message);
          setValidationErrors(validationErrors);
          
          // Show specific error messages
          if (validationErrors.email) {
            setEmailValidation({ isValid: false, message: validationErrors.email });
          }
          if (validationErrors.phone) {
            setPhoneValidation({ isValid: false, message: validationErrors.phone });
          }
        } catch (parseError) {
          console.error("Error parsing validation errors:", parseError);
        }
      } else {
        // Generic error message
        alert("Error creating appointment. Please try again.");
      }
    } finally {
      setLoading(false);
    }
  };

  const filteredClients = clients.filter(client => {
    const fullName = `${client.firstName || ''} ${client.lastName || ''}`.toLowerCase();
    const searchLower = searchTerm.toLowerCase().trim();
    const matches = fullName.includes(searchLower) || 
           (client.phoneNumber || '').includes(searchLower);
    
    if (searchTerm && matches) {
      console.log('Client search match:', client.firstName, client.lastName, 'for term:', searchTerm);
    }
    
    return matches;
  });

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return renderClientInfoStep();
      case 2:
        return renderDateTimeStep();
      case 3:
        return renderServiceAndStylistStep();
      case 4:
        return renderReviewStep();
      default:
        return null;
    }
  };

  const renderClientInfoStep = () => {
    // Show loading state only if clients array is undefined (still loading)
    // If clients is an empty array, it means no clients exist, so show the form
    if (clients === undefined) {
      return (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#160B53] mx-auto"></div>
          <p className="mt-2 text-gray-600">Loading client data...</p>
        </div>
      );
    }

    // Show message if no clients exist, but still show the form
    const noClientsMessage = clients.length === 0 ? (
      <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <p className="text-blue-800 text-sm">
          <strong>Note:</strong> No existing clients found. You can create a new client below.
        </p>
      </div>
    ) : null;

    // If client is already selected, show their info
    if (clientMode === "selected" && formData.clientId) {
      const selectedClient = clients.find(c => c.id === formData.clientId);
      return (
        <div className="space-y-6">
          <div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Selected Client</h2>
            <p className="text-gray-600">Client information for this appointment</p>
          </div>

          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-medium text-green-800">
                  {`${selectedClient?.firstName || ''} ${selectedClient?.lastName || ''}`.trim()}
                </h3>
                <p className="text-sm text-green-600">{selectedClient?.phone}</p>
                {selectedClient?.email && (
                  <p className="text-sm text-green-600">{selectedClient?.email}</p>
                )}
              </div>
              <button
                type="button"
                onClick={() => {
                  setFormData(prev => ({
                    ...prev,
                    clientId: "",
                    clientFirstName: "",
                    clientLastName: "",
                    clientPhone: "",
                    clientEmail: "",
                    clientBirthday: "",
                    clientGender: "",
                    isNewClient: true,
                    registerAsUser: false,
                    autoGeneratedPassword: ""
                  }));
                  setClientMode("search");
                  setShowClientSearch(false);
                  setEmailValidation({ isValid: null, message: "" });
                }}
                className="text-green-600 hover:text-green-800 text-sm font-medium"
              >
                Change Client
              </button>
            </div>
          </div>
        </div>
      );
    }

    // If registering new client, show registration form
    if (clientMode === "new") {
      return renderNewClientForm();
    }

    // Default: Show simplified client form with search
    return (
      <div className="space-y-6">
        {noClientsMessage}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Client Information</h2>
          <p className="text-gray-600">Search for existing client or enter new client details</p>
        </div>

        {/* Search Bar */}
        <div className="space-y-4">
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
              value={searchTerm}
                onChange={(e) => {
                setSearchTerm(e.target.value);
                setShowClientSearch(e.target.value.length > 0);
              }}
              placeholder="Search existing client by name or phone..."
              className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent text-lg"
              />
            </div>
            
            {/* Search Results */}
          {showClientSearch && searchTerm && (
            <div className="bg-white border border-gray-200 rounded-xl shadow-2xl max-h-80 overflow-y-auto z-50">
                {filteredClients.length > 0 ? (
                <div className="divide-y divide-gray-100">
                  {filteredClients.map((client) => (
                    <div
                        key={client.id}
                      onClick={() => {
                        // Autofill the form with selected client data
                        setFormData(prev => ({
                          ...prev,
                          clientFirstName: client.firstName || '',
                          clientLastName: client.lastName || '',
                          clientPhone: client.phoneNumber || '',
                          clientEmail: client.email || '',
                          clientBirthday: client.birthday || '',
                          clientGender: client.gender || '',
                          clientId: client.id,
                          isNewClient: false,
                          registerAsUser: false, // Always set to false for existing clients
                          autoGeneratedPassword: ""
                        }));
                        setSearchTerm('');
                        setShowClientSearch(false);
                      }}
                      className="p-6 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer transition-all duration-300 border-l-4 border-transparent hover:border-[#160B53] hover:shadow-md"
                    >
                      <div className="flex items-start gap-4">
                        {/* Client Avatar */}
                        <div className="flex-shrink-0">
                          <div className="w-14 h-14 bg-gradient-to-br from-[#160B53] to-[#2D1B69] rounded-xl flex items-center justify-center text-white font-bold text-lg shadow-lg ring-2 ring-white">
                            {`${client.firstName?.[0] || ''}${client.lastName?.[0] || ''}`.toUpperCase()}
                          </div>
                        </div>

                        {/* Client Information */}
                        <div className="flex-1 min-w-0">
                          {/* Name and ID */}
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="text-xl font-bold text-gray-900 truncate">
                              {`${client.firstName || ''} ${client.lastName || ''}`.trim()}
                            </h4>
                            <span className="text-xs text-gray-500 bg-gray-100 px-3 py-1.5 rounded-full font-mono">
                              ID: {client.id?.slice(-6) || 'N/A'}
                            </span>
                          </div>

                          {/* Contact Information */}
                          <div className="space-y-2 mb-4">
                            <div className="flex items-center gap-3 text-sm">
                              <div className="w-5 h-5 bg-blue-100 rounded-full flex items-center justify-center">
                                <Phone className="w-3 h-3 text-blue-600" />
                              </div>
                              <span className="text-gray-700 font-medium">{client.phoneNumber || 'No phone'}</span>
                            </div>
                        {client.email && (
                              <div className="flex items-center gap-3 text-sm">
                                <div className="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center">
                                  <Mail className="w-3 h-3 text-green-600" />
                                </div>
                                <span className="text-gray-700 truncate">{client.email}</span>
                              </div>
                            )}
                          </div>

                          {/* Profile Details */}
                          <div className="flex flex-wrap gap-2 mb-4">
                            {client.birthday && (
                              <div className="flex items-center gap-2 text-xs text-gray-700 bg-orange-50 px-3 py-2 rounded-lg border border-orange-200">
                                <Cake className="w-3 h-3 text-orange-600" />
                                <span className="font-medium">{new Date(client.birthday).toLocaleDateString()}</span>
                              </div>
                            )}
                            {client.gender && (
                              <div className="flex items-center gap-2 text-xs text-gray-700 bg-purple-50 px-3 py-2 rounded-lg border border-purple-200">
                                <User2 className="w-3 h-3 text-purple-600" />
                                <span className="font-medium">{client.gender.charAt(0).toUpperCase() + client.gender.slice(1)}</span>
                              </div>
                            )}
                            {client.clientData?.category && (
                              <div className="flex items-center gap-2 text-xs text-gray-700 bg-indigo-50 px-3 py-2 rounded-lg border border-indigo-200">
                                <Tag className="w-3 h-3 text-indigo-600" />
                                <span className="font-medium">Category: {client.clientData.category}</span>
                              </div>
                            )}
                            {client.clientData?.loyaltyPoints && (
                              <div className="flex items-center gap-2 text-xs text-gray-700 bg-yellow-50 px-3 py-2 rounded-lg border border-yellow-200">
                                <Star className="w-3 h-3 text-yellow-600" />
                                <span className="font-medium">{client.clientData.loyaltyPoints} points</span>
                              </div>
                            )}
                          </div>

                          {/* Account Status and Action */}
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              {client.isUser ? (
                                <div className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-green-50 border border-green-200">
                                  <Shield className="w-4 h-4 text-green-600" />
                                  <span className="text-xs font-semibold text-green-800">User Account</span>
                                </div>
                              ) : (
                                <div className="flex items-center gap-2 px-3 py-1.5 rounded-lg bg-gray-50 border border-gray-200">
                                  <UserCheck className="w-4 h-4 text-gray-600" />
                                  <span className="text-xs font-semibold text-gray-700">Client Only</span>
                                </div>
                              )}
                            </div>
                            
                            {/* Select Button */}
                            <div className="flex items-center gap-2 text-sm text-white font-semibold bg-gradient-to-r from-[#160B53] to-[#2D1B69] px-4 py-2 rounded-lg hover:from-[#0f073d] hover:to-[#1a0a4a] transition-all duration-200 shadow-md hover:shadow-lg">
                              <CheckCircle className="w-4 h-4" />
                              <span>Select Client</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    ))}
                  </div>
                ) : (
                <div className="p-12 text-center text-gray-500">
                  <div className="w-20 h-20 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-inner">
                    <Search className="w-10 h-10 text-gray-400" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-3">No clients found</h3>
                  <p className="text-sm text-gray-600 mb-4">No clients match "{searchTerm}"</p>
                  <p className="text-xs text-gray-500 bg-gray-50 px-4 py-2 rounded-lg inline-block">
                    Fill in the form below to create a new client
                  </p>
                  </div>
                )}
              </div>
            )}
          </div>

        {/* Client Form */}
        <div className="bg-gray-50 rounded-lg p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Client Details</h3>
          
          {/* Basic Required Fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">First Name *</label>
              <input
                type="text"
                value={formData.clientFirstName}
                onChange={(e) => setFormData(prev => ({ ...prev, clientFirstName: e.target.value }))}
                placeholder="Enter first name"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Last Name *</label>
              <input
                type="text"
                value={formData.clientLastName}
                onChange={(e) => setFormData(prev => ({ ...prev, clientLastName: e.target.value }))}
                placeholder="Enter last name"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              />
            </div>
          </div>
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Phone Number *</label>
            <input
              type="text"
              value={formData.clientPhone}
              onChange={(e) => handlePhoneChange(e.target.value)}
              placeholder="Enter phone number"
              className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent ${
                phoneValidation.isValid === false ? 'border-red-500' : 
                phoneValidation.isValid === true ? 'border-green-500' : 'border-gray-300'
              }`}
            />
            {phoneValidation.message && (
              <p className={`mt-1 text-sm ${
                phoneValidation.isValid === false ? 'text-red-600' : 
                phoneValidation.isValid === true ? 'text-green-600' : 'text-gray-500'
              }`}>
                {isValidating ? 'Checking availability...' : phoneValidation.message}
              </p>
            )}
          </div>

          {/* User Registration Option */}
          <div className="mt-6 p-4 bg-white rounded-lg border border-gray-200">
            <h4 className="text-sm font-medium text-gray-900 mb-3">Register as User Account?</h4>
            <div className="space-y-3">
              <label className={`flex items-center ${formData.clientId ? 'opacity-50 cursor-not-allowed' : ''}`}>
                <input
                  type="radio"
                  name="registerAsUser"
                  checked={formData.registerAsUser === true}
                  onChange={() => setFormData(prev => ({ ...prev, registerAsUser: true }))}
                  disabled={!!formData.clientId}
                  className="h-4 w-4 text-[#160B53] focus:ring-[#160B53] border-gray-300 disabled:cursor-not-allowed disabled:opacity-50"
                />
                <span className={`ml-2 text-sm ${formData.clientId ? 'text-gray-500' : 'text-gray-700'}`}>
                  <strong>Yes, register as user</strong> - Client can login and book appointments online
                </span>
              </label>
              <label className="flex items-center">
                <input
                  type="radio"
                  name="registerAsUser"
                  checked={formData.registerAsUser === false}
                  onChange={() => setFormData(prev => ({ ...prev, registerAsUser: false }))}
                  className="h-4 w-4 text-[#160B53] focus:ring-[#160B53] border-gray-300"
                />
                <span className="ml-2 text-sm text-gray-700">
                  <strong>No, client only</strong> - Just for appointment booking, no online access
                </span>
              </label>
            </div>
            
            {/* Information message for existing clients */}
            {formData.clientId && (
              <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-start gap-2">
                  <Info className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0" />
                  <div className="text-sm text-blue-800">
                    <p className="font-medium mb-1">Existing Client Selected</p>
                    <p>This client already exists in the system. User registration is not available for existing clients to prevent duplicate accounts.</p>
                  </div>
                </div>
              </div>
            )}
            
            {/* Additional Registration Fields - Only show if registering as user */}
            {formData.registerAsUser && (
              <div className="mt-6 space-y-4">
                <div className="border-t border-gray-200 pt-4">
                  <h5 className="text-sm font-medium text-gray-900 mb-3">Additional Registration Details</h5>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Email Address *</label>
                      <input
                        type="email"
                        value={formData.clientEmail}
                        onChange={(e) => handleEmailChange(e.target.value)}
                        placeholder="Enter email address"
                        className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent ${
                          emailValidation.isValid === false ? 'border-red-500' : 
                          emailValidation.isValid === true ? 'border-green-500' : 'border-gray-300'
                        }`}
                      />
                      {emailValidation.message && (
                        <p className={`mt-1 text-sm ${
                          emailValidation.isValid === false ? 'text-red-600' : 
                          emailValidation.isValid === true ? 'text-green-600' : 'text-gray-500'
                        }`}>
                          {isValidating ? 'Checking availability...' : emailValidation.message}
                        </p>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Birthday</label>
                      <input
                        type="date"
                        value={formData.clientBirthday}
                        onChange={(e) => setFormData(prev => ({ ...prev, clientBirthday: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
                      />
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Gender</label>
                    <select
                      value={formData.clientGender}
                      onChange={(e) => setFormData(prev => ({ ...prev, clientGender: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
                    >
                      <option value="">Select gender</option>
                      <option value="male">Male</option>
                      <option value="female">Female</option>
                      <option value="other">Other</option>
                    </select>
          </div>
        </div>
              </div>
            )}
          </div>
        </div>

      </div>
    );
  };

  const renderNewClientForm = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">New Client Registration</h2>
        <p className="text-gray-600">Enter details for the new client</p>
      </div>

      <div className="space-y-6">
        {/* Client Name */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* First Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              First Name *
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                name="clientFirstName"
                value={formData.clientFirstName}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientFirstName ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter first name"
                required
              />
            </div>
            {errors.clientFirstName && (
              <p className="mt-1 text-sm text-red-600">{errors.clientFirstName}</p>
            )}
          </div>

          {/* Last Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Last Name *
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                name="clientLastName"
                value={formData.clientLastName}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientLastName ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter last name"
                required
              />
            </div>
            {errors.clientLastName && (
              <p className="mt-1 text-sm text-red-600">{errors.clientLastName}</p>
            )}
          </div>
        </div>

        {/* Phone Number and Email Address */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Client Phone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phone Number *
            </label>
            <div className="relative">
              <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="tel"
                name="clientPhone"
                value={formData.clientPhone}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientPhone ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter phone number"
                required
              />
            </div>
            {errors.clientPhone && (
              <p className="mt-1 text-sm text-red-600">{errors.clientPhone}</p>
            )}
          </div>

          {/* Client Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email Address
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="email"
                name="clientEmail"
                value={formData.clientEmail}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  emailValidation.isValid === false ? 'border-red-500' : 
                  emailValidation.isValid === true ? 'border-green-500' : 'border-gray-300'
                }`}
                placeholder="Enter email address"
              />
            </div>
            {emailValidation.message && (
              <p className={`mt-1 text-sm ${
                emailValidation.isValid === true ? 'text-green-600' : 
                emailValidation.isValid === false ? 'text-red-600' : 'text-gray-500'
              }`}>
                {emailValidation.message}
              </p>
            )}
          </div>
        </div>

        {/* Birthday and Gender */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Client Birthday */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Birthday
            </label>
            <div className="relative">
              <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="date"
                name="clientBirthday"
                value={formData.clientBirthday}
                onChange={handleInputChange}
                max={new Date().toISOString().split('T')[0]}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53]"
              />
            </div>
          </div>

          {/* Client Gender */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Gender
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <select
                name="clientGender"
                value={formData.clientGender}
                onChange={handleInputChange}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53]"
              >
                <option value="">Select gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
                <option value="prefer-not-to-say">Prefer not to say</option>
              </select>
            </div>
          </div>
        </div>

        {/* Registration Option */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start">
            <div className="flex items-center h-5">
              <input
                type="checkbox"
                id="registerAsUser"
                checked={formData.registerAsUser}
                onChange={handleInputChange}
                name="registerAsUser"
                className="h-4 w-4 text-[#160B53] border-gray-300 rounded focus:ring-[#160B53]"
              />
            </div>
            <div className="ml-3">
              <label htmlFor="registerAsUser" className="text-sm font-medium text-blue-800">
                Register as User Account
              </label>
              <p className="text-sm text-blue-700 mt-1">
                Check this if the client wants to create a user account for online booking and profile management. 
                If unchecked, client data will only be stored for appointment purposes.
              </p>
              
              {/* Show auto-generated password when registerAsUser is checked */}
              {formData.registerAsUser && formData.autoGeneratedPassword && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    <span className="text-sm font-medium text-green-800">Auto-Generated Password</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <code className="text-sm font-mono bg-white px-2 py-1 rounded border text-gray-800">
                      {formData.autoGeneratedPassword}
                    </code>
                    <button
                      type="button"
                      onClick={() => {
                        const newPassword = generatePassword();
                        setFormData(prev => ({ ...prev, autoGeneratedPassword: newPassword }));
                      }}
                      className="text-xs text-blue-600 hover:text-blue-800 font-medium"
                    >
                      Regenerate
                    </button>
                  </div>
                  <div className="text-xs text-green-700 mt-2">
                    <p className="font-medium mb-1">Password Format:</p>
                    <p>• First 2 letters of first name (uppercase)</p>
                    <p>• First 2 letters of last name (lowercase)</p>
                    <p>• Last 2 digits of birth year</p>
                    <p>• 2 random special characters</p>
                  </div>
                  <div className="mt-3">
                    <button
                      type="button"
                      onClick={async () => {
                        if (!formData.clientEmail) {
                          alert('Please enter an email first.');
                          return;
                        }
                        if (emailValidation.isValid === false) {
                          alert(emailValidation.message || 'Please provide a valid email.');
                          return;
                        }
                        setIsSendingPassword(true);
                        try {
                          await sendWelcomePasswordEmail(
                            formData.clientEmail,
                            formData.autoGeneratedPassword || '',
                            formData.clientFirstName
                          );
                          alert('Password email sent.');
                        } catch (e) {
                          console.error('Error sending password email:', e);
                          alert('Failed to send password email.');
                        } finally {
                          setIsSendingPassword(false);
                        }
                      }}
                      className="px-3 py-2 bg-[#160B53] text-white rounded hover:bg-[#0f073d] disabled:opacity-50"
                      disabled={isSendingPassword}
                    >
                      {isSendingPassword ? 'Sending…' : 'Send Password Email'}
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Back to Search Button */}
        <div className="pt-4">
          <button
            type="button"
            onClick={() => {
              setClientMode("search");
              setFormData(prev => ({ 
                ...prev, 
                clientFirstName: "",
                clientLastName: "",
                clientPhone: "",
                clientEmail: "",
                clientBirthday: "",
                clientGender: "",
                registerAsUser: false,
                autoGeneratedPassword: ""
              }));
              setShowClientSearch(false);
              setEmailValidation({ isValid: null, message: "" });
            }}
            className="text-[#160B53] hover:text-[#0f073d] text-sm font-medium flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Client Search
          </button>
        </div>
      </div>
    </div>
  );

  const renderDateTimeStep = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Appointment Scheduling</h2>
        <p className="text-gray-600">Select your preferred date and time</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Calendar View */}
        <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900">Select Date</h3>
              <div className="flex items-center gap-2">
                <button
                  type="button"
                  onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() - 1))}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <ChevronLeft className="h-4 w-4 text-gray-600" />
                </button>
                <span className="text-sm font-medium text-gray-900 min-w-[120px] text-center">
                  {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                </span>
                <button
                  type="button"
                  onClick={() => setCurrentMonth(prev => new Date(prev.getFullYear(), prev.getMonth() + 1))}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <ChevronRight className="h-4 w-4 text-gray-600" />
                </button>
          </div>
            </div>

            {/* Calendar Grid */}
            <div className="grid grid-cols-7 gap-1 mb-4">
              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                <div key={day} className="p-2 text-center text-sm font-medium text-gray-500">
                  {day}
                </div>
              ))}
            </div>

            <div className="grid grid-cols-7 gap-1">
              {(getCalendarDays() || []).map((day, index) => {
                if (!day || !currentMonth) return null;
                
                const isCurrentMonth = day.getMonth() === currentMonth.getMonth();
                const isToday = isSameDay(day, new Date());
                const isSelected = formData.date && isSameDay(day, new Date(formData.date));
                const isPast = day < new Date().setHours(0, 0, 0, 0);
                const isAvailable = isCurrentMonth && !isPast;

                return (
                  <button
                    key={index}
                    type="button"
                    onClick={() => isAvailable && handleDateSelect(day)}
                    disabled={!isAvailable}
                    className={`
                      p-2 text-sm rounded-lg transition-all duration-200
                      ${!isCurrentMonth ? 'text-gray-300' : ''}
                      ${isPast ? 'text-gray-300 cursor-not-allowed' : ''}
                      ${isToday ? 'bg-[#160B53] text-white font-semibold' : ''}
                      ${isSelected && !isToday ? 'bg-[#160B53]/10 text-[#160B53] font-semibold border-2 border-[#160B53]' : ''}
                      ${isAvailable && !isToday && !isSelected ? 'hover:bg-gray-100 text-gray-900' : ''}
                      ${!isAvailable ? 'cursor-not-allowed' : 'cursor-pointer'}
                    `}
                  >
                    {day.getDate()}
                  </button>
                );
              })}
            </div>
          </div>
        </div>

        {/* Time Selection */}
        <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Select Time</h3>
            
            {formData.date ? (
        <div>
                <div className="mb-4 p-3 bg-[#160B53]/5 rounded-lg border border-[#160B53]/20">
                  <p className="text-sm text-[#160B53] font-medium">
                    Selected: {formData.date ? new Date(formData.date).toLocaleDateString('en-US', { 
                      weekday: 'long', 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    }) : 'No date selected'}
                  </p>
                </div>

              {(availableSlots && availableSlots.length > 0) ? (
                  <div className="space-y-3">
                    <p className="text-sm text-gray-600 mb-3">
                      Available time slots ({availableSlots?.length || 0})
                    </p>
                    <div className="grid grid-cols-2 gap-2 max-h-64 overflow-y-auto">
                      {(availableSlots || []).map(slot => (
                        <button
                    key={slot.time} 
                          type="button"
                          onClick={() => handleTimeSelect(slot.time)}
                          disabled={!slot.available}
                          className={`
                            p-3 text-sm rounded-lg border transition-all duration-200
                            ${formData.time === slot.time 
                              ? 'bg-[#160B53] text-white border-[#160B53] font-semibold' 
                              : slot.available 
                                ? 'bg-white text-gray-900 border-gray-300 hover:border-[#160B53] hover:bg-[#160B53]/5' 
                                : 'bg-gray-50 text-gray-400 border-gray-200 cursor-not-allowed'
                            }
                          `}
                  >
                    {slot.display}
                        </button>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <Clock className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                    {availableSlots && availableSlots.length === 0 ? (
                      <div>
                        <p className="text-sm text-red-600 font-medium mb-1">Branch Closed</p>
                        <p className="text-xs text-gray-500">No appointments available on this day</p>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-500">Loading time slots...</p>
                    )}
                  </div>
                )}
          </div>
            ) : (
              <div className="text-center py-8">
                <Calendar className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-500">Please select a date first</p>
              </div>
            )}
          </div>
        </div>
      </div>


      {/* Branch Hours Info - Clean Professional Layout */}
      <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 bg-[#160B53] rounded-lg flex items-center justify-center">
              <Clock className="h-4 w-4 text-white" />
          </div>
        <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {branchInfo?.name || 'David\'s Salon'} Hours
          </h3>
              <p className="text-sm text-gray-600">Operating schedule</p>
                    </div>
                  </div>
        </div>

        <div className="p-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {branchInfo?.operatingHours ? (
              Object.entries(branchInfo.operatingHours).map(([day, hours]) => {
                const isToday = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase() === day;
                const isClosed = hours.toLowerCase().includes('closed') || hours.toLowerCase().includes('off');
                
                return (
                  <div
                    key={day}
                    className={`p-4 rounded-lg border transition-all duration-200 ${
                      isToday 
                        ? 'bg-[#160B53]/5 border-[#160B53] border-2' 
                        : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className={`font-medium ${
                        isToday ? 'text-[#160B53]' : 'text-gray-900'
                      }`}>
                        {day.charAt(0).toUpperCase() + day.slice(1)}
                      </h4>
                      {isToday && (
                        <div className="flex items-center gap-1">
                          <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                          <span className="text-xs text-green-600 font-medium">Today</span>
                      </div>
                      )}
                    </div>
                    <p className={`text-sm ${
                      isClosed 
                        ? 'text-red-600' 
                        : isToday 
                          ? 'text-[#160B53] font-medium' 
                          : 'text-gray-600'
                    }`}>
                      {isClosed ? 'Closed' : hours}
                    </p>
                  </div>
                );
              })
            ) : (
              <div className="col-span-full grid grid-cols-1 sm:grid-cols-3 gap-4">
                {[
                  { day: 'Monday - Friday', hours: '9:00 AM - 6:00 PM' },
                  { day: 'Saturday', hours: '9:00 AM - 5:00 PM' },
                  { day: 'Sunday', hours: '10:00 AM - 4:00 PM' }
                ].map((schedule, index) => (
                  <div key={index} className="p-4 rounded-lg bg-gray-50 border border-gray-200">
                    <h4 className="font-medium text-gray-900 mb-2">{schedule.day}</h4>
                    <p className="text-sm text-gray-600">{schedule.hours}</p>
              </div>
            ))}
        </div>
      )}
          </div>

          {/* Quick Info */}
          <div className="mt-6 pt-4 border-t border-gray-200">
            <div className="flex flex-wrap gap-6 text-sm text-gray-600">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span>Walk-ins welcome</span>
          </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span>Appointments recommended</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                <span>Extended hours available</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Reset to page 1 when search/filter changes
  useEffect(() => {
    setCurrentServicePage(1);
  }, [serviceSearchTerm, selectedCategory]);

  const renderServiceAndStylistStep = () => {
    // Show loading state only if services array is undefined (still loading)
    // If services is an empty array, it means no services exist, so show empty state
    if (services === undefined) {
      return (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#160B53] mx-auto"></div>
          <p className="mt-2 text-gray-600">Loading services...</p>
        </div>
      );
    }

    // If no services exist, show empty state
    if (services.length === 0) {
      return (
        <div className="text-center py-8">
          <p className="text-gray-600">No services available. Please add services first.</p>
        </div>
      );
    }

    const selectedServices = getSelectedServices();
    
    // Filter services based on search and category
    // Use staff services to derive which services are available (intersection)
    const allowedServiceIds = new Set((staffServices || []).map(ss => ss.serviceId));
    const servicesAvailableToStaff = (services || []).filter(svc => allowedServiceIds.has(svc.id));

    const filteredServices = servicesAvailableToStaff.filter(service => {
      if (!service || !service.name) return false;
      const matchesSearch = service.name.toLowerCase().includes(serviceSearchTerm.toLowerCase());
      const matchesCategory = selectedCategory === "all" || service.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
    
    // Get paginated services
    const totalPages = Math.ceil(filteredServices.length / servicesPerPage);
    const startIndex = (currentServicePage - 1) * servicesPerPage;
    const endIndex = startIndex + servicesPerPage;
    const currentServices = filteredServices.slice(startIndex, endIndex);
    
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Service Selection & Stylist Assignment</h2>
          <p className="text-gray-600">Select services and assign stylists for each service</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Services Column */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">Available Services</h3>
              <span className="text-sm text-gray-500">
                {filteredServices.length} services
              </span>
            </div>
            
            {/* Search and Filter */}
            <div className="space-y-3">
              <input
                type="text"
                placeholder="Search services..."
                value={serviceSearchTerm}
                onChange={(e) => setServiceSearchTerm(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              >
                <option value="all">All Categories</option>
                <option value="hair">Hair Services</option>
                <option value="nails">Nail Services</option>
                <option value="facial">Facial Services</option>
                <option value="other">Other Services</option>
              </select>
            </div>
            
            <div className="space-y-3">
              {currentServices.map(service => {
                const isSelected = formData.services.includes(service.id);
                
                return (
                  <div
                    key={service.id}
                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                      isSelected
                        ? 'border-[#160B53] bg-[#160B53]/5'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleServiceToggle(service.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h5 className="font-medium text-gray-900">{service.name}</h5>
                          <span className="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full capitalize">
                            {service.category}
                          </span>
                        </div>
                        <p className="text-sm text-gray-500">{service.duration} minutes</p>
                      </div>
                      <div className="text-right ml-4">
                        <p className="font-semibold text-[#160B53]">₱{service.price}</p>
                        {service.isChemical && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 mt-1">
                            <AlertTriangle className="w-3 h-3 mr-1" />
                            Chemical
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between">
                <button
                  onClick={() => setCurrentServicePage(prev => Math.max(prev - 1, 1))}
                  disabled={currentServicePage === 1}
                  className="px-3 py-2 text-sm border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                >
                  Previous
                </button>
                <span className="text-sm text-gray-500">
                  Page {currentServicePage} of {totalPages} ({filteredServices.length} services)
                </span>
                <button
                  onClick={() => setCurrentServicePage(prev => Math.min(prev + 1, totalPages))}
                  disabled={currentServicePage === totalPages}
                  className="px-3 py-2 text-sm border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                >
                  Next
                </button>
              </div>
            )}
            
            {/* No results message */}
            {filteredServices.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <p>No services found matching your criteria</p>
                <button
                  onClick={() => {
                    setServiceSearchTerm("");
                    setSelectedCategory("all");
                  }}
                  className="mt-2 text-sm text-[#160B53] hover:underline"
                >
                  Clear filters
                </button>
              </div>
            )}

            {errors.services && (
              <p className="text-sm text-red-600">{errors.services}</p>
            )}
          </div>

          {/* Stylists Column */}
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Stylist Assignment</h3>
            
            {selectedServices.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <User className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                <p>Select services first to assign stylists</p>
              </div>
            ) : (
              <div className="space-y-4">
                {selectedServices.map(service => {
                  const allStylists = getAllStylistsForService(service.id);
                  const availableStylists = allStylists.filter(s => s.isAvailableAtSelectedTime);
                  const assignedStylist = formData.stylists[service.id];

                  return (
                    <div key={service.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-medium text-gray-900">{service.name}</h4>
                        {assignedStylist && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Assigned
                          </span>
                        )}
                      </div>

                      <div className="space-y-2">
                        {allStylists.map(stylist => {
                          const isAvailable = stylist.isAvailableAtSelectedTime;
                          const isAssigned = assignedStylist === stylist.id;
                          
                          return (
                          <button
                            key={stylist.id}
                            type="button"
                              onClick={() => isAvailable ? handleStylistAssign(service.id, stylist.id) : null}
                              disabled={!isAvailable}
                              className={`w-full flex items-center justify-between p-3 rounded-lg border transition-all ${
                                isAssigned
                                  ? 'bg-green-50 border-green-200 text-green-900'
                                  : isAvailable
                                  ? 'bg-white border-gray-200 hover:border-[#160B53] hover:bg-[#160B53]/5 text-gray-900'
                                  : 'bg-gray-50 border-gray-200 text-gray-400 cursor-not-allowed'
                              }`}
                            >
                              <div className="flex items-center space-x-3">
                                <div className="flex-shrink-0">
                                  {isAvailable ? (
                                    <CheckCircle className="w-5 h-5 text-green-500" />
                                  ) : (
                                    <X className="w-5 h-5 text-red-500" />
                                  )}
                                </div>
                                <div className="text-left">
                                  <div className={`font-medium ${isAvailable ? 'text-gray-900' : 'text-gray-400'}`}>
                                    {stylist.name}
                                  </div>
                                  <div className={`text-sm ${isAvailable ? 'text-gray-500' : 'text-gray-400'}`}>
                                    {stylist.specialties.join(', ')}
                                  </div>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                {isAssigned && (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Selected
                                  </span>
                                )}
                                {!isAvailable && (
                                  <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    Not Available
                                  </span>
                                )}
                              </div>
                          </button>
                          );
                        })}
                      </div>

                      {availableStylists.length === 0 && (
                        <p className="text-sm text-gray-500">No stylists available for this service</p>
                      )}
                    </div>
                  );
                })}
              </div>
            )}

            {errors.stylists && (
              <p className="text-sm text-red-600">{errors.stylists}</p>
            )}
          </div>
        </div>

        {/* Total Cost Display */}
        {formData.services.length > 0 && (
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex justify-between items-center">
              <span className="text-lg font-medium text-gray-900">Estimated Total:</span>
              <span className="text-2xl font-bold text-[#160B53]">₱{formData.totalCost.toLocaleString()}</span>
            </div>
            <p className="text-sm text-gray-500 mt-1">* Final cost may vary based on service complexity</p>
          </div>
        )}
      </div>
    );
  };



  const renderReviewStep = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Review & Confirm</h2>
        <p className="text-gray-600">Review your appointment details before confirming</p>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-6 space-y-6">
        {/* Client Information */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Client Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500">Name</p>
              <p className="font-medium text-gray-900">{`${formData.clientFirstName} ${formData.clientLastName}`.trim()}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Phone</p>
              <p className="font-medium text-gray-900">{formData.clientPhone}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Email</p>
              <p className="font-medium text-gray-900">{formData.clientEmail || 'Not provided'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Birthday</p>
              <p className="font-medium text-gray-900">{formData.clientBirthday || 'Not provided'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Gender</p>
              <p className="font-medium text-gray-900">{formData.clientGender || 'Not provided'}</p>
            </div>
            {formData.registerAsUser && (
              <div className="md:col-span-2">
                <p className="text-sm text-gray-500">User Account</p>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                  <span className="font-medium text-green-800">Will be registered as user</span>
                </div>
                {formData.autoGeneratedPassword && (
                  <p className="text-xs text-gray-600 mt-1">
                    Password will be sent to email: {formData.autoGeneratedPassword}
                  </p>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Appointment Details */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Appointment Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500">Date</p>
              <p className="font-medium text-gray-900">{formData.date}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Time</p>
              <p className="font-medium text-gray-900">{formData.time}</p>
            </div>
          </div>
        </div>

        {/* Services & Stylists */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Services & Stylists</h3>
          <div className="space-y-3">
            {getSelectedServices().map(service => {
              const assignedStylist = stylists.find(s => s.id === formData.stylists[service.id]);
              return (
                <div key={service.id} className="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0">
                  <div>
                    <p className="font-medium text-gray-900">{service.name}</p>
                    <p className="text-sm text-gray-500">
                      with {assignedStylist?.name || 'No stylist assigned'}
                    </p>
                  </div>
                  <p className="font-medium text-[#160B53]">₱{service.price || 0}</p>
                </div>
              );
            })}
          </div>
        </div>

        {/* Total Cost */}
        <div className="border-t border-gray-200 pt-4">
          <div className="flex justify-between items-center">
            <span className="text-lg font-medium text-gray-900">Total Cost (Estimate)</span>
            <span className="text-2xl font-bold text-[#160B53]">₱{formData.totalCost.toLocaleString()}</span>
          </div>
          <p className="text-sm text-gray-500 mt-1">* Final cost may vary based on service complexity</p>
        </div>

        {/* Notes */}
        {formData.notes && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Notes</h3>
            <p className="text-gray-700">{formData.notes}</p>
          </div>
        )}
      </div>
    </div>
  );

  const steps = [
    { number: 1, title: "Client Info", description: "Search existing or enter new client" },
    { number: 2, title: "Date & Time", description: "Schedule appointment" },
    { number: 3, title: "Services & Stylists", description: "Select services and assign stylists" },
    { number: 4, title: "Review", description: "Confirm details" }
  ];

  return (
    <SidebarWithHeader
      userInfo={userInfo}
      pageTitle="New Appointment"
    >
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center gap-4">
          <button
            onClick={() => navigate("/receptionist-appointments")}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">New Appointment</h1>
            <p className="text-gray-600">Book a new appointment following the proper workflow</p>
          </div>
        </div>

        {/* Progress Steps */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${
                  currentStep >= step.number
                    ? 'bg-[#160B53] text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {step.number}
                </div>
                <div className="ml-3 hidden sm:block">
                  <p className={`text-sm font-medium ${
                    currentStep >= step.number ? 'text-[#160B53]' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </p>
                  <p className="text-xs text-gray-500">{step.description}</p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`hidden sm:block w-8 h-0.5 mx-4 ${
                    currentStep > step.number ? 'bg-[#160B53]' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Step Content */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          {renderStepContent()}
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={prevStep}
            disabled={currentStep === 1}
            className="flex items-center gap-2 px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ArrowLeft className="w-4 h-4" />
            Previous
          </button>

          {currentStep < 4 ? (
            <button
              onClick={nextStep}
              className="flex items-center gap-2 px-6 py-2 bg-[#160B53] text-white rounded-lg hover:bg-[#0f073d]"
            >
              Next
              <ArrowRight className="w-4 h-4" />
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={loading}
              className="flex items-center gap-2 px-6 py-2 bg-[#160B53] text-white rounded-lg hover:bg-[#0f073d] disabled:opacity-50"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save className="w-4 h-4" />
              )}
              {loading ? 'Creating...' : 'Create Appointment'}
            </button>
          )}
        </div>
      </div>
    </SidebarWithHeader>
  );
}
