import React, { useState, useEffect } from "react";
import SidebarWithHeader from "./common/components/ReceptionistSidebarWithHeader.jsx";
import { useAuth } from "../contexts/AuthContext.jsx";
import { useNavigate } from "react-router-dom";
import { 
  Calendar, 
  Clock, 
  User, 
  Phone, 
  Mail,
  Scissors,
  Save,
  ArrowLeft,
  ArrowRight,
  Search,
  CheckCircle,
  AlertTriangle,
  Filter,
  ChevronLeft,
  ChevronRight,
  Check,
  X,
  Info
} from "lucide-react";

export default function ReceptionistNewAppointment() {
  const { userProfile, branchInfo } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    clientFirstName: "",
    clientLastName: "",
    clientPhone: "",
    clientEmail: "",
    clientBirthday: "",
    clientGender: "",
    clientId: "", // For existing clients
    isNewClient: true,
    registerAsUser: false, // Option to register as user or just store data
    autoGeneratedPassword: "", // Auto-generated password for new users
    services: [], // Array of selected services
    stylists: {}, // Object mapping service IDs to stylist IDs
    date: "",
    time: "",
    timeWindow: "", // Preferred time window
    totalCost: 0,
    notes: "",
    status: "pending"
  });

  const [errors, setErrors] = useState({});
  const [clients, setClients] = useState([]);
  const [services, setServices] = useState([]);
  const [stylists, setStylists] = useState([]);
  const [servicesPerPage] = useState(6); // Show 6 services per page
  const [currentServicePage, setCurrentServicePage] = useState(1);
  const [serviceSearchTerm, setServiceSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [availableSlots, setAvailableSlots] = useState([]);
  const [showClientSearch, setShowClientSearch] = useState(false);
  const [availableStylists, setAvailableStylists] = useState([]);
  const [clientMode, setClientMode] = useState("search"); // "search", "new", "selected"
  const [emailValidation, setEmailValidation] = useState({ isValid: null, message: "" });

  const userInfo = {
    name: userProfile?.firstName || "Receptionist",
    subtitle: userProfile?.email || "Receptionist Email",
    badge: "Receptionist",
    profileImage: userProfile?.profileImage || "./placeholder.svg"
  };

  // Generate formatted password based on client info
  const generatePassword = () => {
    const { clientFirstName, clientLastName, clientBirthday } = formData;
    
    // Get first 2 characters of first name (uppercase)
    const firstNamePart = clientFirstName ? clientFirstName.substring(0, 2).toUpperCase() : "CL";
    
    // Get first 2 characters of last name (lowercase)
    const lastNamePart = clientLastName ? clientLastName.substring(0, 2).toLowerCase() : "nt";
    
    // Get last 2 digits of birth year
    const birthYear = clientBirthday ? clientBirthday.substring(2, 4) : "24";
    
    // Generate 2 random special characters
    const specialChars = "!@#$%^&*";
    const randomSpecial = specialChars.charAt(Math.floor(Math.random() * specialChars.length)) + 
                         specialChars.charAt(Math.floor(Math.random() * specialChars.length));
    
    // Format: FirstName(2) + LastName(2) + BirthYear(2) + SpecialChars(2)
    // Example: JOSmith24!@
    const formattedPassword = firstNamePart + lastNamePart + birthYear + randomSpecial;
    
    return formattedPassword;
  };

  // Email validation function
  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email) {
      return { isValid: null, message: "" };
    }
    if (!emailRegex.test(email)) {
      return { isValid: false, message: "Please enter a valid email address" };
    }
    return { isValid: true, message: "Email format is valid" };
  };

  // Mock data - replace with actual Firestore queries
  const mockServices = [
    // Hair Services
    { id: "1", name: "Haircut & Styling", duration: 60, price: 500, category: "hair", isChemical: false },
    { id: "2", name: "Hair Color", duration: 120, price: 1500, category: "hair", isChemical: true },
    { id: "3", name: "Highlights", duration: 180, price: 2000, category: "hair", isChemical: true },
    { id: "4", name: "Rebond", duration: 240, price: 3000, category: "hair", isChemical: true },
    { id: "5", name: "Perm", duration: 180, price: 2500, category: "hair", isChemical: true },
    { id: "6", name: "Hair Treatment", duration: 90, price: 800, category: "hair", isChemical: false },
    
    // Nail Services
    { id: "7", name: "Manicure", duration: 45, price: 300, category: "nails", isChemical: false },
    { id: "8", name: "Pedicure", duration: 60, price: 400, category: "nails", isChemical: false },
    { id: "9", name: "Gel Manicure", duration: 60, price: 500, category: "nails", isChemical: true },
    { id: "10", name: "Nail Art", duration: 30, price: 200, category: "nails", isChemical: false },
    
    // Facial Services
    { id: "11", name: "Facial Treatment", duration: 90, price: 800, category: "facial", isChemical: false },
    { id: "12", name: "Chemical Peel", duration: 60, price: 1200, category: "facial", isChemical: true },
    { id: "13", name: "Microdermabrasion", duration: 75, price: 1000, category: "facial", isChemical: false },
    
    // Other Services
    { id: "14", name: "Beard Trim", duration: 30, price: 200, category: "other", isChemical: false },
    { id: "15", name: "Eyebrow Shaping", duration: 30, price: 150, category: "other", isChemical: false }
  ];

  const mockStylists = [
    { id: "1", name: "Anna Reyes", serviceIds: ["1", "2"], specialties: ["Haircut & Styling", "Hair Color"] },
    { id: "2", name: "Sarah Johnson", serviceIds: ["2", "3", "4", "5"], specialties: ["Hair Color", "Highlights", "Rebond", "Perm"] },
    { id: "3", name: "Maria Lopez", serviceIds: ["7", "8", "11"], specialties: ["Manicure", "Pedicure", "Facial Treatment"] },
    { id: "4", name: "Mike Chen", serviceIds: ["1", "14"], specialties: ["Haircut & Styling", "Beard Trim"] },
    { id: "5", name: "Lisa Wong", serviceIds: ["9", "10"], specialties: ["Gel Manicure", "Nail Art"] },
    { id: "6", name: "Dr. Maria Santos", serviceIds: ["12", "13"], specialties: ["Chemical Peel", "Microdermabrasion"] }
  ];

  const mockClients = [
    { id: "1", name: "Maria Santos", phone: "+63 912 345 6789", email: "maria@email.com" },
    { id: "2", name: "John Dela Cruz", phone: "+63 917 123 4567", email: "john@email.com" },
    { id: "3", name: "Lisa Garcia", phone: "+63 918 987 6543", email: "lisa@email.com" },
    { id: "4", name: "Robert Wilson", phone: "+63 919 555 1234", email: "robert@email.com" }
  ];

  useEffect(() => {
    setServices(mockServices);
    setStylists(mockStylists);
    setClients(mockClients);
    
    // Generate initial time slots
    generateAvailableSlots();
  }, []);

  useEffect(() => {
    // Calculate total cost when services change
    const total = formData.services.reduce((sum, serviceId) => {
      const service = services.find(s => s.id === serviceId);
      return sum + (service?.price || 0);
    }, 0);
    setFormData(prev => ({ ...prev, totalCost: total }));
  }, [formData.services, services]);

  useEffect(() => {
    if (formData.date) {
      generateAvailableSlots();
    }
  }, [formData.date]);

  const generateAvailableSlots = () => {
    const slots = [];
    const startTime = 9; // 9 AM
    const endTime = 18; // 6 PM
    
    for (let hour = startTime; hour < endTime; hour++) {
      const timeString = `${hour.toString().padStart(2, '0')}:00`;
      const displayHour = hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour);
      const ampm = hour >= 12 ? 'PM' : 'AM';
      
      slots.push({
        time: timeString,
        display: `${displayHour}:00 ${ampm}`,
        available: true // All time slots are always available
      });
    }
    
    console.log('Generated time slots:', slots.length);
    setAvailableSlots(slots);
  };

  const nextStep = () => {
    if (validateCurrentStep()) {
      setCurrentStep((prev) => prev + 1);
    }
  };

  const prevStep = () => {
    setCurrentStep((prev) => prev - 1);
  };

  const validateCurrentStep = () => {
    const newErrors = {};
    
      switch (currentStep) {
        case 1: // Client Information
          if (clientMode === "selected") {
            // If client is selected, no validation needed
            break;
          } else if (clientMode === "new") {
            // If registering new client, validate all fields
            if (!formData.clientFirstName.trim()) newErrors.clientFirstName = "First name is required";
            if (!formData.clientLastName.trim()) newErrors.clientLastName = "Last name is required";
            if (!formData.clientPhone.trim()) newErrors.clientPhone = "Phone number is required";
          } else {
            // If in search mode, need to select a client or register new
            if (!formData.clientId && !formData.clientFirstName.trim() && !formData.clientLastName.trim()) {
              newErrors.client = "Please search for an existing client or register a new one";
            }
          }
          break;
      case 2: // Date & Time
        if (!formData.date) newErrors.date = "Please select a date";
        if (!formData.time) newErrors.time = "Please select a time";
        break;
      case 3: // Service Selection & Stylist Assignment
        if (formData.services.length === 0) newErrors.services = "Please select at least one service";
        // Check if all services have assigned stylists
        for (const serviceId of formData.services) {
          if (!formData.stylists[serviceId]) {
            newErrors.stylists = "Please assign a stylist for all services";
            break;
          }
        }
        break;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ""
      }));
    }

    // Handle email validation
    if (name === 'clientEmail') {
      const validation = validateEmail(value);
      setEmailValidation(validation);
    }

    // Generate password when registerAsUser is checked
    if (name === 'registerAsUser' && e.target.checked) {
      const password = generatePassword();
      setFormData(prev => ({
        ...prev,
        autoGeneratedPassword: password
      }));
    }

    // Regenerate password when client info changes (if registerAsUser is checked)
    if (formData.registerAsUser && (name === 'clientFirstName' || name === 'clientLastName' || name === 'clientBirthday')) {
      // Use setTimeout to ensure the formData is updated first
      setTimeout(() => {
        const password = generatePassword();
        setFormData(prev => ({
          ...prev,
          autoGeneratedPassword: password
        }));
      }, 0);
    }
  };

  const handleClientSelect = (client) => {
    // Split the client name into first and last name
    const nameParts = client.name.split(' ');
    const firstName = nameParts[0] || '';
    const lastName = nameParts.slice(1).join(' ') || '';
    
    setFormData(prev => ({
      ...prev,
      clientFirstName: firstName,
      clientLastName: lastName,
      clientPhone: client.phone,
      clientEmail: client.email,
      clientBirthday: client.birthday || "",
      clientGender: client.gender || "",
      clientId: client.id,
      isNewClient: false,
      registerAsUser: false,
      autoGeneratedPassword: ""
    }));
    setClientMode("selected");
    setShowClientSearch(false);
    setEmailValidation({ isValid: null, message: "" });
  };

  const handleServiceToggle = (serviceId) => {
    setFormData(prev => ({
      ...prev,
      services: prev.services.includes(serviceId)
        ? prev.services.filter(id => id !== serviceId)
        : [...prev.services, serviceId]
    }));
  };

  const handleStylistAssign = (serviceId, stylistId) => {
    setFormData(prev => ({
      ...prev,
      stylists: {
        ...prev.stylists,
        [serviceId]: stylistId
      }
    }));
  };

  const getAvailableStylistsForService = (serviceId) => {
    return stylists.filter(stylist => stylist.serviceIds.includes(serviceId));
  };

  const getSelectedServices = () => {
    return formData.services.map(serviceId => 
      services.find(service => service.id === serviceId)
    ).filter(Boolean);
  };

  const hasChemicalServices = () => {
    return getSelectedServices().some(service => service.isChemical);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateCurrentStep()) return;
    
    setLoading(true);
    
    try {
      // TODO: Save to Firestore
      console.log("Creating appointment:", formData);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Redirect back to appointments list
      navigate("/receptionist-appointments");
    } catch (error) {
      console.error("Error creating appointment:", error);
    } finally {
      setLoading(false);
    }
  };

  const filteredClients = clients.filter(client =>
    client.name.toLowerCase().includes((formData.clientFirstName + " " + formData.clientLastName).toLowerCase().trim()) ||
    client.phone.includes(formData.clientPhone)
  );

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return renderClientInfoStep();
      case 2:
        return renderDateTimeStep();
      case 3:
        return renderServiceAndStylistStep();
      case 4:
        return renderReviewStep();
      default:
        return null;
    }
  };

  const renderClientInfoStep = () => {
    // If client is already selected, show their info
    if (clientMode === "selected" && formData.clientId) {
      const selectedClient = clients.find(c => c.id === formData.clientId);
      return (
        <div className="space-y-6">
          <div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Selected Client</h2>
            <p className="text-gray-600">Client information for this appointment</p>
          </div>

          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-medium text-green-800">{selectedClient?.name}</h3>
                <p className="text-sm text-green-600">{selectedClient?.phone}</p>
                {selectedClient?.email && (
                  <p className="text-sm text-green-600">{selectedClient?.email}</p>
                )}
              </div>
              <button
                type="button"
                onClick={() => {
                  setFormData(prev => ({
                    ...prev,
                    clientId: "",
                    clientFirstName: "",
                    clientLastName: "",
                    clientPhone: "",
                    clientEmail: "",
                    clientBirthday: "",
                    clientGender: "",
                    registerAsUser: false,
                    autoGeneratedPassword: ""
                  }));
                  setClientMode("search");
                  setShowClientSearch(false);
                  setEmailValidation({ isValid: null, message: "" });
                }}
                className="text-green-600 hover:text-green-800 text-sm font-medium"
              >
                Change Client
              </button>
            </div>
          </div>
        </div>
      );
    }

    // If registering new client, show registration form
    if (clientMode === "new") {
      return renderNewClientForm();
    }

    // Default: Show search and registration options
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Client Selection</h2>
          <p className="text-gray-600">Search for existing client or register a new one</p>
        </div>

        {/* Search Existing Client */}
        <div className="space-y-4">
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-3">Search Existing Client</h3>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                value={`${formData.clientFirstName} ${formData.clientLastName}`.trim()}
                onChange={(e) => {
                  const fullName = e.target.value;
                  const nameParts = fullName.split(' ');
                  setFormData(prev => ({ 
                    ...prev, 
                    clientFirstName: nameParts[0] || '',
                    clientLastName: nameParts.slice(1).join(' ') || ''
                  }));
                  setShowClientSearch(true);
                }}
                onFocus={() => setShowClientSearch(true)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
                placeholder="Search by name or phone number"
              />
            </div>
            
            {/* Search Results */}
            {showClientSearch && (formData.clientFirstName || formData.clientLastName) && (
              <div className="mt-2">
                {filteredClients.length > 0 ? (
                  <div className="border border-gray-200 rounded-lg max-h-48 overflow-y-auto">
                    {filteredClients.map(client => (
                      <button
                        key={client.id}
                        type="button"
                        onClick={() => handleClientSelect(client)}
                        className="w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                      >
                        <div className="font-medium text-gray-900">{client.name}</div>
                        <div className="text-sm text-gray-500">{client.phone}</div>
                        {client.email && (
                          <div className="text-sm text-gray-500">{client.email}</div>
                        )}
                      </button>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-4 text-gray-500">
                    <p className="text-sm">No existing clients found for "{formData.clientName}"</p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Divider */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">OR</span>
            </div>
          </div>

          {/* Register New Client */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-3">Register New Client</h3>
            <p className="text-sm text-gray-600 mb-4">
              If the client is not in the system, you can register them now.
            </p>
            <button
              type="button"
              onClick={() => {
                setClientMode("new");
                setShowClientSearch(false);
              }}
              className="w-full flex items-center justify-center gap-2 px-4 py-3 border-2 border-dashed border-[#160B53] text-[#160B53] rounded-lg hover:bg-[#160B53] hover:text-white transition-colors"
            >
              <User className="w-5 h-5" />
              Register New Client
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderNewClientForm = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">New Client Registration</h2>
        <p className="text-gray-600">Enter details for the new client</p>
      </div>

      <div className="space-y-6">
        {/* Client Name */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* First Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              First Name *
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                name="clientFirstName"
                value={formData.clientFirstName}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientFirstName ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter first name"
                required
              />
            </div>
            {errors.clientFirstName && (
              <p className="mt-1 text-sm text-red-600">{errors.clientFirstName}</p>
            )}
          </div>

          {/* Last Name */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Last Name *
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                name="clientLastName"
                value={formData.clientLastName}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientLastName ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter last name"
                required
              />
            </div>
            {errors.clientLastName && (
              <p className="mt-1 text-sm text-red-600">{errors.clientLastName}</p>
            )}
          </div>
        </div>

        {/* Phone Number and Email Address */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Client Phone */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phone Number *
            </label>
            <div className="relative">
              <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="tel"
                name="clientPhone"
                value={formData.clientPhone}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  errors.clientPhone ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Enter phone number"
                required
              />
            </div>
            {errors.clientPhone && (
              <p className="mt-1 text-sm text-red-600">{errors.clientPhone}</p>
            )}
          </div>

          {/* Client Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email Address
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="email"
                name="clientEmail"
                value={formData.clientEmail}
                onChange={handleInputChange}
                className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                  emailValidation.isValid === false ? 'border-red-500' : 
                  emailValidation.isValid === true ? 'border-green-500' : 'border-gray-300'
                }`}
                placeholder="Enter email address"
              />
            </div>
            {emailValidation.message && (
              <p className={`mt-1 text-sm ${
                emailValidation.isValid === true ? 'text-green-600' : 
                emailValidation.isValid === false ? 'text-red-600' : 'text-gray-500'
              }`}>
                {emailValidation.message}
              </p>
            )}
          </div>
        </div>

        {/* Birthday and Gender */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Client Birthday */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Birthday
            </label>
            <div className="relative">
              <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="date"
                name="clientBirthday"
                value={formData.clientBirthday}
                onChange={handleInputChange}
                max={new Date().toISOString().split('T')[0]}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53]"
              />
            </div>
          </div>

          {/* Client Gender */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Gender
            </label>
            <div className="relative">
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <select
                name="clientGender"
                value={formData.clientGender}
                onChange={handleInputChange}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53]"
              >
                <option value="">Select gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
                <option value="prefer-not-to-say">Prefer not to say</option>
              </select>
            </div>
          </div>
        </div>

        {/* Registration Option */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start">
            <div className="flex items-center h-5">
              <input
                type="checkbox"
                id="registerAsUser"
                checked={formData.registerAsUser}
                onChange={handleInputChange}
                name="registerAsUser"
                className="h-4 w-4 text-[#160B53] border-gray-300 rounded focus:ring-[#160B53]"
              />
            </div>
            <div className="ml-3">
              <label htmlFor="registerAsUser" className="text-sm font-medium text-blue-800">
                Register as User Account
              </label>
              <p className="text-sm text-blue-700 mt-1">
                Check this if the client wants to create a user account for online booking and profile management. 
                If unchecked, client data will only be stored for appointment purposes.
              </p>
              
              {/* Show auto-generated password when registerAsUser is checked */}
              {formData.registerAsUser && formData.autoGeneratedPassword && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    <span className="text-sm font-medium text-green-800">Auto-Generated Password</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <code className="text-sm font-mono bg-white px-2 py-1 rounded border text-gray-800">
                      {formData.autoGeneratedPassword}
                    </code>
                    <button
                      type="button"
                      onClick={() => {
                        const newPassword = generatePassword();
                        setFormData(prev => ({ ...prev, autoGeneratedPassword: newPassword }));
                      }}
                      className="text-xs text-blue-600 hover:text-blue-800 font-medium"
                    >
                      Regenerate
                    </button>
                  </div>
                  <div className="text-xs text-green-700 mt-2">
                    <p className="font-medium mb-1">Password Format:</p>
                    <p>• First 2 letters of first name (uppercase)</p>
                    <p>• First 2 letters of last name (lowercase)</p>
                    <p>• Last 2 digits of birth year</p>
                    <p>• 2 random special characters</p>
                    <p className="mt-1">This password will be sent to the client's email address for their first login.</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Back to Search Button */}
        <div className="pt-4">
          <button
            type="button"
            onClick={() => {
              setClientMode("search");
              setFormData(prev => ({ 
                ...prev, 
                clientFirstName: "",
                clientLastName: "",
                clientPhone: "",
                clientEmail: "",
                clientBirthday: "",
                clientGender: "",
                registerAsUser: false,
                autoGeneratedPassword: ""
              }));
              setShowClientSearch(false);
              setEmailValidation({ isValid: null, message: "" });
            }}
            className="text-[#160B53] hover:text-[#0f073d] text-sm font-medium flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Client Search
          </button>
        </div>
      </div>
    </div>
  );

  const renderDateTimeStep = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Appointment Scheduling</h2>
        <p className="text-gray-600">Select preferred date and time window</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Date Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Date *
          </label>
          <div className="relative">
            <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="date"
              name="date"
              value={formData.date}
              onChange={handleInputChange}
              min={new Date().toISOString().split('T')[0]}
              className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                errors.date ? 'border-red-500' : 'border-gray-300'
              }`}
            />
          </div>
          {errors.date && (
            <p className="mt-1 text-sm text-red-600">{errors.date}</p>
          )}
        </div>

        {/* Time Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Time *
          </label>
          <div className="relative">
            <Clock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <select
              name="time"
              value={formData.time}
              onChange={handleInputChange}
              className={`w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#160B53] ${
                errors.time ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              <option value="">Select a time</option>
              {availableSlots.length > 0 ? (
                availableSlots.map(slot => (
                  <option 
                    key={slot.time} 
                    value={slot.time}
                  >
                    {slot.display}
                  </option>
                ))
              ) : (
                <option value="" disabled>Loading time slots...</option>
              )}
            </select>
          </div>
          {errors.time && (
            <p className="mt-1 text-sm text-red-600">{errors.time}</p>
          )}
          {availableSlots.length > 0 && (
            <p className="mt-1 text-sm text-gray-500">
              {availableSlots.length} available time slots
            </p>
          )}
        </div>
      </div>

      {/* Available Stylists for Selected Date & Time */}
      {formData.date && formData.time && (
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">
            Available Stylists for {new Date(formData.date).toLocaleDateString()} at {formData.time}
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {stylists.map(stylist => (
              <div key={stylist.id} className="bg-white border border-gray-200 rounded-lg p-4">
                <div className="flex items-center space-x-3">
                  <div className="flex-shrink-0">
                    <div className="w-10 h-10 bg-[#160B53] rounded-full flex items-center justify-center">
                      <span className="text-white font-medium text-sm">
                        {stylist.name.split(' ').map(n => n[0]).join('')}
                      </span>
                    </div>
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="text-sm font-medium text-gray-900 truncate">
                      {stylist.name}
                    </h4>
                    <p className="text-sm text-gray-500 truncate">
                      {stylist.specialty}
                    </p>
                    <div className="flex items-center mt-1">
                      <div className="flex items-center">
                        {[...Array(5)].map((_, i) => (
                          <svg
                            key={i}
                            className={`w-3 h-3 ${
                              i < Math.floor(stylist.rating) ? 'text-yellow-400' : 'text-gray-300'
                            }`}
                            fill="currentColor"
                            viewBox="0 0 20 20"
                          >
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                          </svg>
                        ))}
                        <span className="ml-1 text-xs text-gray-500">
                          {stylist.rating}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex-shrink-0">
                    <div className={`w-2 h-2 rounded-full ${
                      stylist.available ? 'bg-green-400' : 'bg-red-400'
                    }`}></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Branch Hours Info */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-start">
          <div className="flex-shrink-0">
            <Clock className="h-5 w-5 text-blue-400" />
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-blue-800">Branch Hours</h3>
            <div className="mt-1 text-sm text-blue-700">
              <p>Monday - Friday: 9:00 AM - 6:00 PM</p>
              <p>Saturday: 9:00 AM - 5:00 PM</p>
              <p>Sunday: 10:00 AM - 4:00 PM</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Reset to page 1 when search/filter changes
  useEffect(() => {
    setCurrentServicePage(1);
  }, [serviceSearchTerm, selectedCategory]);

  const renderServiceAndStylistStep = () => {
    const selectedServices = getSelectedServices();
    
    // Filter services based on search and category
    const filteredServices = services.filter(service => {
      const matchesSearch = service.name.toLowerCase().includes(serviceSearchTerm.toLowerCase());
      const matchesCategory = selectedCategory === "all" || service.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
    
    // Get paginated services
    const totalPages = Math.ceil(filteredServices.length / servicesPerPage);
    const startIndex = (currentServicePage - 1) * servicesPerPage;
    const endIndex = startIndex + servicesPerPage;
    const currentServices = filteredServices.slice(startIndex, endIndex);
    
    return (
      <div className="space-y-6">
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Service Selection & Stylist Assignment</h2>
          <p className="text-gray-600">Select services and assign stylists for each service</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Services Column */}
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">Available Services</h3>
              <span className="text-sm text-gray-500">
                {filteredServices.length} services
              </span>
            </div>
            
            {/* Search and Filter */}
            <div className="space-y-3">
              <input
                type="text"
                placeholder="Search services..."
                value={serviceSearchTerm}
                onChange={(e) => setServiceSearchTerm(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              />
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#160B53] focus:border-transparent"
              >
                <option value="all">All Categories</option>
                <option value="hair">Hair Services</option>
                <option value="nails">Nail Services</option>
                <option value="facial">Facial Services</option>
                <option value="other">Other Services</option>
              </select>
            </div>
            
            <div className="space-y-3">
              {currentServices.map(service => {
                const isSelected = formData.services.includes(service.id);
                
                return (
                  <div
                    key={service.id}
                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                      isSelected
                        ? 'border-[#160B53] bg-[#160B53]/5'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleServiceToggle(service.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h5 className="font-medium text-gray-900">{service.name}</h5>
                          <span className="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full capitalize">
                            {service.category}
                          </span>
                        </div>
                        <p className="text-sm text-gray-500">{service.duration} minutes</p>
                      </div>
                      <div className="text-right ml-4">
                        <p className="font-semibold text-[#160B53]">₱{service.price}</p>
                        {service.isChemical && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 mt-1">
                            <AlertTriangle className="w-3 h-3 mr-1" />
                            Chemical
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between">
                <button
                  onClick={() => setCurrentServicePage(prev => Math.max(prev - 1, 1))}
                  disabled={currentServicePage === 1}
                  className="px-3 py-2 text-sm border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                >
                  Previous
                </button>
                <span className="text-sm text-gray-500">
                  Page {currentServicePage} of {totalPages} ({filteredServices.length} services)
                </span>
                <button
                  onClick={() => setCurrentServicePage(prev => Math.min(prev + 1, totalPages))}
                  disabled={currentServicePage === totalPages}
                  className="px-3 py-2 text-sm border border-gray-300 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
                >
                  Next
                </button>
              </div>
            )}
            
            {/* No results message */}
            {filteredServices.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <p>No services found matching your criteria</p>
                <button
                  onClick={() => {
                    setServiceSearchTerm("");
                    setSelectedCategory("all");
                  }}
                  className="mt-2 text-sm text-[#160B53] hover:underline"
                >
                  Clear filters
                </button>
              </div>
            )}

            {errors.services && (
              <p className="text-sm text-red-600">{errors.services}</p>
            )}
          </div>

          {/* Stylists Column */}
          <div className="space-y-6">
            <h3 className="text-lg font-medium text-gray-900">Stylist Assignment</h3>
            
            {selectedServices.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <User className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                <p>Select services first to assign stylists</p>
              </div>
            ) : (
              <div className="space-y-4">
                {selectedServices.map(service => {
                  const availableStylists = getAvailableStylistsForService(service.id);
                  const assignedStylist = formData.stylists[service.id];

                  return (
                    <div key={service.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-medium text-gray-900">{service.name}</h4>
                        {assignedStylist && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Assigned
                          </span>
                        )}
                      </div>

                      <div className="space-y-2">
                        {availableStylists.map(stylist => (
                          <button
                            key={stylist.id}
                            type="button"
                            onClick={() => handleStylistAssign(service.id, stylist.id)}
                            className={`w-full p-3 border rounded-lg text-left transition-colors ${
                              assignedStylist === stylist.id
                                ? 'border-[#160B53] bg-[#160B53]/5'
                                : 'border-gray-200 hover:border-gray-300'
                            }`}
                          >
                            <div className="font-medium text-gray-900">{stylist.name}</div>
                            <div className="text-sm text-gray-500">{stylist.specialties.join(', ')}</div>
                          </button>
                        ))}
                      </div>

                      {availableStylists.length === 0 && (
                        <p className="text-sm text-gray-500">No stylists available for this service</p>
                      )}
                    </div>
                  );
                })}
              </div>
            )}

            {errors.stylists && (
              <p className="text-sm text-red-600">{errors.stylists}</p>
            )}
          </div>
        </div>

        {/* Total Cost Display */}
        {formData.services.length > 0 && (
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex justify-between items-center">
              <span className="text-lg font-medium text-gray-900">Estimated Total:</span>
              <span className="text-2xl font-bold text-[#160B53]">₱{formData.totalCost.toLocaleString()}</span>
            </div>
            <p className="text-sm text-gray-500 mt-1">* Final cost may vary based on service complexity</p>
          </div>
        )}
      </div>
    );
  };



  const renderReviewStep = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Review & Confirm</h2>
        <p className="text-gray-600">Review your appointment details before confirming</p>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-6 space-y-6">
        {/* Client Information */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Client Information</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500">Name</p>
              <p className="font-medium text-gray-900">{`${formData.clientFirstName} ${formData.clientLastName}`.trim()}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Phone</p>
              <p className="font-medium text-gray-900">{formData.clientPhone}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Email</p>
              <p className="font-medium text-gray-900">{formData.clientEmail || 'Not provided'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Birthday</p>
              <p className="font-medium text-gray-900">{formData.clientBirthday || 'Not provided'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Gender</p>
              <p className="font-medium text-gray-900">{formData.clientGender || 'Not provided'}</p>
            </div>
            {formData.registerAsUser && (
              <div className="md:col-span-2">
                <p className="text-sm text-gray-500">User Account</p>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                  <span className="font-medium text-green-800">Will be registered as user</span>
                </div>
                {formData.autoGeneratedPassword && (
                  <p className="text-xs text-gray-600 mt-1">
                    Password will be sent to email: {formData.autoGeneratedPassword}
                  </p>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Appointment Details */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Appointment Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <p className="text-sm text-gray-500">Date</p>
              <p className="font-medium text-gray-900">{formData.date}</p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Time</p>
              <p className="font-medium text-gray-900">{formData.time}</p>
            </div>
          </div>
        </div>

        {/* Services & Stylists */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Services & Stylists</h3>
          <div className="space-y-3">
            {getSelectedServices().map(service => {
              const assignedStylist = stylists.find(s => s.id === formData.stylists[service.id]);
              return (
                <div key={service.id} className="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0">
                  <div>
                    <p className="font-medium text-gray-900">{service.name}</p>
                    <p className="text-sm text-gray-500">with {assignedStylist?.name}</p>
                  </div>
                  <p className="font-medium text-[#160B53]">₱{service.price}</p>
                </div>
              );
            })}
          </div>
        </div>

        {/* Total Cost */}
        <div className="border-t border-gray-200 pt-4">
          <div className="flex justify-between items-center">
            <span className="text-lg font-medium text-gray-900">Total Cost (Estimate)</span>
            <span className="text-2xl font-bold text-[#160B53]">₱{formData.totalCost.toLocaleString()}</span>
          </div>
          <p className="text-sm text-gray-500 mt-1">* Final cost may vary based on service complexity</p>
        </div>

        {/* Notes */}
        {formData.notes && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">Notes</h3>
            <p className="text-gray-700">{formData.notes}</p>
          </div>
        )}
      </div>
    </div>
  );

  const steps = [
    { number: 1, title: "Client Info", description: "Enter client details" },
    { number: 2, title: "Date & Time", description: "Schedule appointment" },
    { number: 3, title: "Services & Stylists", description: "Select services and assign stylists" },
    { number: 4, title: "Review", description: "Confirm details" }
  ];

  return (
    <SidebarWithHeader
      userInfo={userInfo}
      pageTitle="New Appointment"
    >
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center gap-4">
          <button
            onClick={() => navigate("/receptionist-appointments")}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">New Appointment</h1>
            <p className="text-gray-600">Book a new appointment following the proper workflow</p>
          </div>
        </div>

        {/* Progress Steps */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${
                  currentStep >= step.number
                    ? 'bg-[#160B53] text-white'
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {step.number}
                </div>
                <div className="ml-3 hidden sm:block">
                  <p className={`text-sm font-medium ${
                    currentStep >= step.number ? 'text-[#160B53]' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </p>
                  <p className="text-xs text-gray-500">{step.description}</p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`hidden sm:block w-8 h-0.5 mx-4 ${
                    currentStep > step.number ? 'bg-[#160B53]' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Step Content */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          {renderStepContent()}
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={prevStep}
            disabled={currentStep === 1}
            className="flex items-center gap-2 px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ArrowLeft className="w-4 h-4" />
            Previous
          </button>

          {currentStep < 4 ? (
            <button
              onClick={nextStep}
              className="flex items-center gap-2 px-6 py-2 bg-[#160B53] text-white rounded-lg hover:bg-[#0f073d]"
            >
              Next
              <ArrowRight className="w-4 h-4" />
            </button>
          ) : (
            <button
              onClick={handleSubmit}
              disabled={loading}
              className="flex items-center gap-2 px-6 py-2 bg-[#160B53] text-white rounded-lg hover:bg-[#0f073d] disabled:opacity-50"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Save className="w-4 h-4" />
              )}
              {loading ? 'Creating...' : 'Create Appointment'}
            </button>
          )}
        </div>
      </div>
    </SidebarWithHeader>
  );
}
